# Generated by Django 4.1.7 on 2023-03-17 05:40

import dashboard.fields
from django.db import migrations, models
import django.db.models.deletion
import modelcluster.fields
import wagtail.contrib.routable_page.models
import wagtail.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("wagtailcore", "0078_referenceindex"),
        ("wagtailimages", "0024_index_image_file_hash"),
    ]

    operations = [
        migrations.CreateModel(
            name="PivotTable",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                ("instructions", wagtail.fields.RichTextField(blank=True)),
                (
                    "instructions_heading",
                    models.TextField(
                        blank=True,
                        default="Interactive visualisation instructions",
                        verbose_name="Accordion heading",
                    ),
                ),
                (
                    "instruction_position",
                    models.CharField(
                        choices=[("top", "Top"), ("bottom", "Bottom")],
                        default="bottom",
                        max_length=256,
                        verbose_name="Position",
                    ),
                ),
                (
                    "caption",
                    wagtail.fields.RichTextField(
                        blank=True,
                        help_text="Optional: caption text and link(s) for the chart",
                        null=True,
                    ),
                ),
                (
                    "data_source_url",
                    models.TextField(help_text="Link to the CSV data file"),
                ),
                (
                    "row_label",
                    models.CharField(
                        help_text="CSV column to show as the label for each table row",
                        max_length=200,
                    ),
                ),
                (
                    "row_label_heading",
                    models.CharField(
                        blank=True,
                        default="Row labels",
                        help_text="Optional: heading of the row label column",
                        max_length=200,
                        null=True,
                    ),
                ),
                (
                    "column_label",
                    models.CharField(
                        help_text="CSV column to show as the label for each table column",
                        max_length=200,
                    ),
                ),
                (
                    "cell_value",
                    models.CharField(
                        help_text="CSV column whose data shall appear in the table cells",
                        max_length=200,
                    ),
                ),
                ("show_row_total", models.BooleanField(blank=True, default=True)),
                ("show_column_total", models.BooleanField(blank=True, default=True)),
                (
                    "filter_by",
                    models.TextField(
                        blank=True,
                        help_text="Optional: taken from the CSV data file - comma separated column names to filter by",
                        null=True,
                    ),
                ),
                (
                    "default_filter_values",
                    models.TextField(
                        blank=True,
                        help_text="Optional: Comma separated values to match the provided filters",
                        null=True,
                    ),
                ),
                (
                    "cell_highlight_condition",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("lt", "Less Than"),
                            ("gt", "Greater Than"),
                            ("eq", "Equals"),
                            ("lte", "Less Than or Equal"),
                            ("gte", "Greater Than or Equal"),
                        ],
                        default="lt",
                        help_text="Optional: condition for highlighting cells",
                        max_length=5,
                        null=True,
                        verbose_name="Cell Condition",
                    ),
                ),
                (
                    "cell_highlight_value",
                    models.IntegerField(
                        blank=True,
                        help_text="Optional: value to conditionally highlight cells",
                        null=True,
                        verbose_name="Cell value",
                    ),
                ),
            ],
            options={
                "verbose_name": "Pivot Table",
            },
            bases=("wagtailcore.page", models.Model),
        ),
        migrations.CreateModel(
            name="RawCodePage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                ("instructions", wagtail.fields.RichTextField(blank=True)),
                (
                    "instructions_heading",
                    models.TextField(
                        blank=True,
                        default="Interactive visualisation instructions",
                        verbose_name="Accordion heading",
                    ),
                ),
                (
                    "instruction_position",
                    models.CharField(
                        choices=[("top", "Top"), ("bottom", "Bottom")],
                        default="bottom",
                        max_length=256,
                        verbose_name="Position",
                    ),
                ),
                (
                    "caption",
                    wagtail.fields.RichTextField(
                        blank=True,
                        help_text="Optional: caption text and link(s) for the chart",
                        null=True,
                    ),
                ),
                (
                    "subtitle",
                    models.TextField(
                        blank=True,
                        help_text="Optional: subtitle to appear underneath the title.",
                        null=True,
                    ),
                ),
                (
                    "html",
                    dashboard.fields.AceEditorField(
                        blank=True, default="{% load wagtailcore_tags %}"
                    ),
                ),
                (
                    "javascript",
                    dashboard.fields.AceEditorField(
                        blank=True, default='"use strict";'
                    ),
                ),
                (
                    "css",
                    dashboard.fields.AceEditorField(
                        blank=True, default="/* CSS goes here */"
                    ),
                ),
            ],
            options={
                "verbose_name": "Raw Code Snippet",
            },
            bases=(
                wagtail.contrib.routable_page.models.RoutablePageMixin,
                "wagtailcore.page",
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="VisualisationsPage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                ("instructions", wagtail.fields.RichTextField(blank=True)),
                (
                    "instructions_heading",
                    models.TextField(
                        blank=True,
                        default="Interactive visualisation instructions",
                        verbose_name="Accordion heading",
                    ),
                ),
                (
                    "instruction_position",
                    models.CharField(
                        choices=[("top", "Top"), ("bottom", "Bottom")],
                        default="bottom",
                        max_length=256,
                        verbose_name="Position",
                    ),
                ),
                (
                    "header_assets",
                    dashboard.fields.AceEditorField(
                        blank=True,
                        default="{% load wagtailcore_tags %}",
                        help_text="Optional: code that should be added to document head e.g. CSS",
                    ),
                ),
                (
                    "footer_assets",
                    dashboard.fields.AceEditorField(
                        blank=True,
                        default="{% load wagtailcore_tags %}",
                        help_text="Optional: code that should be added to bottom of the document body e.g. JavaScript",
                    ),
                ),
                (
                    "no_js_text",
                    models.CharField(
                        default="To view this interactive visualisation make sure JavaScript is available on your device.",
                        help_text="Text that is displayed for all charts when the user does not have JavaScript available",
                        max_length=255,
                    ),
                ),
                (
                    "larger_screen_text",
                    models.CharField(
                        default="To view this interactive visualisation use a device with a larger screen.",
                        help_text="Text that is displayed for individual charts when the user's screen is less than the minimum width defined in the chart page",
                        max_length=255,
                    ),
                ),
            ],
            options={
                "verbose_name": "Visualisations Page",
            },
            bases=("wagtailcore.page", models.Model),
        ),
        migrations.CreateModel(
            name="PivotTableRowHighlight",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "sort_order",
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
                (
                    "row_highlight_field",
                    models.CharField(
                        blank=True,
                        help_text="Optional: value of the column for which to conditionally highlight row",
                        max_length=100,
                        null=True,
                        verbose_name="Column/Field",
                    ),
                ),
                (
                    "row_highlight_condition",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("lt", "Less Than"),
                            ("gt", "Greater Than"),
                            ("eq", "Equals"),
                            ("lte", "Less Than or Equal"),
                            ("gte", "Greater Than or Equal"),
                        ],
                        default="lt",
                        help_text="Optional: condition for highlighting a row",
                        max_length=5,
                        null=True,
                        verbose_name="Condition",
                    ),
                ),
                (
                    "row_highlight_value",
                    models.CharField(
                        blank=True,
                        help_text="Optional: column value to conditionally highlight row",
                        max_length=200,
                        null=True,
                        verbose_name="Column value",
                    ),
                ),
                (
                    "row_highlight_colour",
                    models.CharField(
                        blank=True,
                        default="#ffb3b3",
                        help_text="Optional: HTML colour of highlighted row - when in doubt, refer to https://htmlcolors.com/",
                        max_length=256,
                    ),
                ),
                (
                    "page",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="row_highlights",
                        to="dashboard.pivottable",
                    ),
                ),
            ],
            options={
                "ordering": ["sort_order"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="AdvancedChartPage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                ("instructions", wagtail.fields.RichTextField(blank=True)),
                (
                    "instructions_heading",
                    models.TextField(
                        blank=True,
                        default="Interactive visualisation instructions",
                        verbose_name="Accordion heading",
                    ),
                ),
                (
                    "instruction_position",
                    models.CharField(
                        choices=[("top", "Top"), ("bottom", "Bottom")],
                        default="bottom",
                        max_length=256,
                        verbose_name="Position",
                    ),
                ),
                (
                    "display_fallback_mobile",
                    models.BooleanField(
                        default=True,
                        help_text="Optional: when selected devices with screen widths up to 400px will be served the fallback image",
                        verbose_name="Show on mobile",
                    ),
                ),
                (
                    "display_fallback_tablet",
                    models.BooleanField(
                        default=False,
                        help_text="Optional: when selected devices with screen widths up to 700px will be served the fallback image",
                        verbose_name="Show on tablet",
                    ),
                ),
                (
                    "alternative_text",
                    models.TextField(
                        blank=True,
                        help_text="Accessibility text for screen readers e.t.c",
                        null=True,
                    ),
                ),
                (
                    "caption",
                    wagtail.fields.RichTextField(
                        blank=True,
                        help_text="Optional: caption text and link(s) for the chart",
                        null=True,
                    ),
                ),
                (
                    "subtitle",
                    models.TextField(
                        blank=True,
                        help_text="Optional: subtitle to appear underneath the title.",
                        null=True,
                    ),
                ),
                (
                    "html",
                    dashboard.fields.AceEditorField(
                        blank=True, default="{% load wagtailcore_tags %}"
                    ),
                ),
                (
                    "javascript",
                    dashboard.fields.AceEditorField(
                        blank=True, default='"use strict";'
                    ),
                ),
                (
                    "css",
                    dashboard.fields.AceEditorField(
                        blank=True, default="/* CSS goes here */"
                    ),
                ),
                (
                    "fallback_image",
                    models.ForeignKey(
                        help_text="Fallback image for the chart",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="wagtailimages.image",
                    ),
                ),
            ],
            options={
                "verbose_name": "Advanced Chart Page",
            },
            bases=(
                wagtail.contrib.routable_page.models.RoutablePageMixin,
                "wagtailcore.page",
                models.Model,
            ),
        ),
    ]
