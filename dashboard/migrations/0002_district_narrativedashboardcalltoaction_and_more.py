# Generated by Django 4.1.7 on 2023-03-17 13:37

import common.templatetags.string_utils
import dashboard.mixins
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import modelcluster.fields
import wagtail.blocks
import wagtail.contrib.table_block.blocks
import wagtail.fields
import wagtail.images.blocks
import wagtail.snippets.blocks
import wagtailmetadata.models


class Migration(migrations.Migration):

    dependencies = [
        ("wagtailcore", "0078_referenceindex"),
        ("wagtailimages", "0024_index_image_file_hash"),
        ("taggit", "0005_auto_20220424_2025"),
        ("dashboard", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="District",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255, unique=True)),
                (
                    "slug",
                    models.SlugField(
                        blank=True,
                        help_text="Optional. Will be auto-generated from name if left blank.",
                        max_length=255,
                        null=True,
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Districts",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="NarrativeDashboardCallToAction",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "sort_order",
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
                (
                    "title",
                    models.CharField(
                        blank=True,
                        help_text="Optional: when left blank, the call to action will not be show",
                        max_length=255,
                        null=True,
                        verbose_name="Title",
                    ),
                ),
                (
                    "body",
                    models.TextField(
                        blank=True,
                        help_text="Optional: describe the purpose of your call to action in a bit more detail",
                        null=True,
                        verbose_name="Description",
                    ),
                ),
                (
                    "button_text",
                    models.CharField(
                        blank=True,
                        help_text="Optional: this is required to show the button",
                        max_length=255,
                        null=True,
                        verbose_name="Button Caption",
                    ),
                ),
                (
                    "button_url",
                    models.URLField(
                        blank=True,
                        help_text="Optional: this is required to show the button",
                        max_length=255,
                        null=True,
                        verbose_name="Button URL",
                    ),
                ),
                (
                    "position",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("top", "Top"),
                            ("bottom", "Bottom"),
                            ("top-bottom", "Top & Bottom"),
                        ],
                        default="top",
                        max_length=100,
                        null=True,
                        verbose_name="Position",
                    ),
                ),
                (
                    "inherit",
                    models.BooleanField(
                        default=True, help_text="Optional: show this CTA on child pages"
                    ),
                ),
            ],
            options={
                "ordering": ["sort_order"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="NarrativeDashboardPage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                (
                    "hero_image_credit_name",
                    models.TextField(
                        blank=True,
                        help_text="Name of source of image used in hero if any",
                        null=True,
                        verbose_name="Image credit name",
                    ),
                ),
                (
                    "hero_image_credit_url",
                    models.URLField(
                        blank=True,
                        help_text="A Link to the original source of the image if any",
                        null=True,
                        verbose_name="Image credit url",
                    ),
                ),
                (
                    "hero_text",
                    wagtail.fields.RichTextField(
                        blank=True,
                        help_text="A description of the page content",
                        null=True,
                    ),
                ),
                (
                    "hero_link_caption",
                    models.CharField(
                        blank=True,
                        help_text="Text to display on the link button",
                        max_length=255,
                    ),
                ),
                (
                    "call_to_action_title",
                    models.CharField(
                        blank=True,
                        help_text="Optional: when left blank, the call to action will not be show",
                        max_length=255,
                        null=True,
                        verbose_name="Title",
                    ),
                ),
                (
                    "call_to_action_body",
                    models.TextField(
                        blank=True,
                        help_text="Optional: describe the purpose of your call to action in a bit more detail",
                        null=True,
                        verbose_name="Description",
                    ),
                ),
                (
                    "call_to_action_button_text",
                    models.CharField(
                        blank=True,
                        help_text="Optional: this is required to show the button",
                        max_length=255,
                        null=True,
                        verbose_name="Button caption",
                    ),
                ),
                (
                    "call_to_action_button_url",
                    models.URLField(
                        blank=True,
                        help_text="Optional: this is required to show the button",
                        max_length=255,
                        null=True,
                        verbose_name="Button URL",
                    ),
                ),
                (
                    "published_date",
                    models.DateTimeField(
                        blank=True,
                        default=django.utils.timezone.now,
                        help_text="This date will be used for display and ordering",
                    ),
                ),
                (
                    "uuid",
                    models.CharField(
                        default=common.templatetags.string_utils.uid, max_length=6
                    ),
                ),
                (
                    "content",
                    wagtail.fields.StreamField(
                        [
                            (
                                "captioned_image",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "image",
                                            wagtail.images.blocks.ImageChooserBlock(
                                                help_text="Optimal minimum width 800px"
                                            ),
                                        ),
                                        (
                                            "descriptive_text",
                                            wagtail.blocks.RichTextBlock(
                                                features=[
                                                    "h2",
                                                    "h3",
                                                    "h4",
                                                    "bold",
                                                    "italic",
                                                    "ol",
                                                    "ul",
                                                    "hr",
                                                    "link",
                                                    "document-link",
                                                    "image",
                                                    "embed",
                                                ],
                                                help_text="Optional: descriptive text to appear above the image",
                                                required=False,
                                            ),
                                        ),
                                        (
                                            "caption",
                                            wagtail.blocks.TextBlock(
                                                help_text="Optional: caption text to appear below the image",
                                                required=False,
                                            ),
                                        ),
                                        (
                                            "caption_link",
                                            wagtail.blocks.URLBlock(
                                                help_text="Optional: external link to appear below the image",
                                                required=False,
                                            ),
                                        ),
                                        (
                                            "caption_label",
                                            wagtail.blocks.CharBlock(
                                                help_text="Optional: label for the caption link, defaults to the link if left blank",
                                                required=False,
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                            (
                                "block_quote",
                                wagtail.blocks.StructBlock(
                                    [
                                        ("text", wagtail.blocks.TextBlock()),
                                        (
                                            "source",
                                            wagtail.blocks.TextBlock(
                                                help_text="Who is this quote acredited to?",
                                                required=False,
                                            ),
                                        ),
                                        (
                                            "center",
                                            wagtail.blocks.BooleanBlock(
                                                default=False, required=False
                                            ),
                                        ),
                                    ],
                                    template="blocks/publication_blockquote.html",
                                ),
                            ),
                            (
                                "downloads",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "downloads",
                                            wagtail.blocks.StreamBlock(
                                                [
                                                    (
                                                        "file",
                                                        wagtail.blocks.StructBlock(
                                                            [
                                                                (
                                                                    "file",
                                                                    wagtail.snippets.blocks.SnippetChooserBlock(
                                                                        "downloads.DashboardDownload"
                                                                    ),
                                                                )
                                                            ],
                                                            icon="doc-empty",
                                                            label="File",
                                                        ),
                                                    ),
                                                    (
                                                        "url",
                                                        wagtail.blocks.StructBlock(
                                                            [
                                                                (
                                                                    "label",
                                                                    wagtail.blocks.CharBlock(),
                                                                ),
                                                                (
                                                                    "url",
                                                                    wagtail.blocks.URLBlock(),
                                                                ),
                                                            ],
                                                            icon="site",
                                                            label="URL",
                                                        ),
                                                    ),
                                                ]
                                            ),
                                        )
                                    ]
                                ),
                            ),
                            (
                                "section_heading",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "section_id",
                                            wagtail.blocks.CharBlock(
                                                help_text='Prepended by a chapter number if available, this value should be unique to the page, e.g. "1", "1.1", "2", "2.1" etc.'
                                            ),
                                        ),
                                        ("heading", wagtail.blocks.CharBlock()),
                                    ]
                                ),
                            ),
                            (
                                "table",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "heading",
                                            wagtail.blocks.CharBlock(required=False),
                                        ),
                                        (
                                            "table",
                                            wagtail.contrib.table_block.blocks.TableBlock(),
                                        ),
                                        (
                                            "caption",
                                            wagtail.blocks.RichTextBlock(
                                                features=[
                                                    "h2",
                                                    "h3",
                                                    "h4",
                                                    "bold",
                                                    "italic",
                                                    "ol",
                                                    "ul",
                                                    "hr",
                                                    "link",
                                                    "document-link",
                                                    "image",
                                                    "embed",
                                                ],
                                                help_text="Optional: caption text to appear below the table",
                                                required=False,
                                            ),
                                        ),
                                        (
                                            "caption_link",
                                            wagtail.blocks.URLBlock(
                                                help_text="Optional: external link to appear below the table",
                                                required=False,
                                            ),
                                        ),
                                        (
                                            "caption_label",
                                            wagtail.blocks.CharBlock(
                                                help_text="Optional: label for the caption link, defaults to the link if left blank",
                                                required=False,
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                            (
                                "pivot_table",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "show_title",
                                            wagtail.blocks.BooleanBlock(
                                                default=True, required=False
                                            ),
                                        ),
                                        (
                                            "pivot_table",
                                            wagtail.blocks.PageChooserBlock(
                                                page_type=["dashboard.PivotTable"]
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                            (
                                "dynamic_table",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "heading",
                                            wagtail.blocks.CharBlock(required=False),
                                        ),
                                        (
                                            "data_source_url",
                                            wagtail.blocks.URLBlock(
                                                help_text="Link to the CSV data file"
                                            ),
                                        ),
                                        (
                                            "caption",
                                            wagtail.blocks.RichTextBlock(
                                                features=[
                                                    "h2",
                                                    "h3",
                                                    "h4",
                                                    "bold",
                                                    "italic",
                                                    "ol",
                                                    "ul",
                                                    "hr",
                                                    "link",
                                                    "document-link",
                                                    "image",
                                                    "embed",
                                                ],
                                                help_text="Optional: caption text to appear below the table",
                                                required=False,
                                            ),
                                        ),
                                        (
                                            "caption_link",
                                            wagtail.blocks.URLBlock(
                                                help_text="Optional: external link to appear below the table",
                                                required=False,
                                            ),
                                        ),
                                        (
                                            "caption_label",
                                            wagtail.blocks.CharBlock(
                                                help_text="Optional: label for the caption link, defaults to the link if left blank",
                                                required=False,
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                            (
                                "rich_text",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "rich_text",
                                            wagtail.blocks.RichTextBlock(
                                                features=[
                                                    "h2",
                                                    "h3",
                                                    "h4",
                                                    "bold",
                                                    "italic",
                                                    "ol",
                                                    "ul",
                                                    "hr",
                                                    "link",
                                                    "document-link",
                                                    "image",
                                                    "embed",
                                                ]
                                            ),
                                        )
                                    ]
                                ),
                            ),
                            (
                                "anchor",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "anchor_id",
                                            wagtail.blocks.CharBlock(
                                                help_text="The unique indentifier for this anchor",
                                                required=True,
                                            ),
                                        )
                                    ]
                                ),
                            ),
                            (
                                "interactive_chart",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "show_title",
                                            wagtail.blocks.BooleanBlock(
                                                default=True, required=False
                                            ),
                                        ),
                                        (
                                            "allow_share",
                                            wagtail.blocks.BooleanBlock(
                                                default=True, required=False
                                            ),
                                        ),
                                        (
                                            "chart_page",
                                            wagtail.blocks.PageChooserBlock(
                                                page_type=[
                                                    "dashboard.ChartPage",
                                                    "dashboard.RawCodePage",
                                                ]
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                            (
                                "cta",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "title",
                                            wagtail.blocks.CharBlock(
                                                label="Title", required=True
                                            ),
                                        ),
                                        (
                                            "body",
                                            wagtail.blocks.TextBlock(
                                                help_text="Optional: describe the purpose of your call to action in a bit more detail",
                                                label="Description",
                                                required=False,
                                            ),
                                        ),
                                        (
                                            "button_text",
                                            wagtail.blocks.CharBlock(
                                                help_text="Optional: this is required to show the button",
                                                label="Button Caption",
                                                required=False,
                                            ),
                                        ),
                                        (
                                            "button_url",
                                            wagtail.blocks.URLBlock(
                                                help_text="Optional: this is required to show the button",
                                                label="Button URL",
                                                required=False,
                                            ),
                                        ),
                                        (
                                            "button_page",
                                            wagtail.blocks.PageChooserBlock(
                                                help_text="Optional: has priority over the button URL field",
                                                label="Button Page",
                                                required=False,
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                            (
                                "accordion",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "accordion_items",
                                            wagtail.blocks.ListBlock(
                                                wagtail.blocks.StructBlock(
                                                    [
                                                        (
                                                            "name",
                                                            wagtail.blocks.TextBlock(
                                                                icon="fa-text"
                                                            ),
                                                        ),
                                                        (
                                                            "description",
                                                            wagtail.blocks.RichTextBlock(
                                                                features=[
                                                                    "h2",
                                                                    "h3",
                                                                    "h4",
                                                                    "bold",
                                                                    "italic",
                                                                    "ol",
                                                                    "ul",
                                                                    "hr",
                                                                    "link",
                                                                    "document-link",
                                                                    "image",
                                                                    "embed",
                                                                ],
                                                                icon="fa-paragraph",
                                                                template="blocks/paragraph_block.html",
                                                            ),
                                                        ),
                                                    ]
                                                )
                                            ),
                                        )
                                    ]
                                ),
                            ),
                        ],
                        use_json_field=True,
                    ),
                ),
                (
                    "download_report_title",
                    models.CharField(
                        blank=True,
                        default="Download this report",
                        max_length=255,
                        null=True,
                        verbose_name="Section title",
                    ),
                ),
                (
                    "download_report_body",
                    models.TextField(
                        blank=True, null=True, verbose_name="Section body"
                    ),
                ),
                (
                    "download_report_button_text",
                    models.CharField(
                        blank=True,
                        default="Download now",
                        max_length=255,
                        null=True,
                        verbose_name="Button caption",
                    ),
                ),
            ],
            options={
                "verbose_name": "Narrative Dashboard",
            },
            bases=(
                wagtailmetadata.models.WagtailImageMetadataMixin,
                dashboard.mixins.DashboardPageSearchMixin,
                dashboard.mixins.FilteredDatasetMixin,
                "wagtailcore.page",
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="NarrativeDashboardPageDataDownloads",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "sort_order",
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
            ],
            options={
                "ordering": ["sort_order"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="NarrativeDashboardPageDataset",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "sort_order",
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
            ],
            options={
                "ordering": ["sort_order"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="NarrativeDashboardPageDownloads",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "sort_order",
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
            ],
            options={
                "ordering": ["sort_order"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Region",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255, unique=True)),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.RenameModel(
            old_name="AdvancedChartPage",
            new_name="ChartPage",
        ),
        migrations.AlterModelOptions(
            name="chartpage",
            options={"verbose_name": "Chart Page"},
        ),
        migrations.CreateModel(
            name="PageDistrict",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "sort_order",
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
                (
                    "district",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="dashboard.district",
                    ),
                ),
                (
                    "page",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="page_districts",
                        to="wagtailcore.page",
                    ),
                ),
            ],
            options={
                "ordering": ["sort_order"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="NarrativeDashboardTopic",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "content_object",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="narrative_dashboard_topics",
                        to="dashboard.narrativedashboardpage",
                    ),
                ),
                (
                    "tag",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(app_label)s_%(class)s_items",
                        to="taggit.tag",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
    ]
